version: '3.7'

# starts 4 docker containers running MinIO.
services:
  minio1:
    image: '${MINIO_IMAGE_NAME}'
    container_name: minio1
    networks:
      - minio
    volumes:
      - data1-1:/data1
      - data1-2:/data2
      - build:/build
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_KMS_KES_ENDPOINT=https://kes:7373
      - MINIO_KMS_KES_CERT_FILE=/build/kes-identity-root.cert
      - MINIO_KMS_KES_KEY_FILE=/build/kes-identity-root.key
      - MINIO_KMS_KES_CA_PATH=/build/kes-server.cert
      - MINIO_KMS_KES_KEY_NAME=minio-key
      - MINIO_SSE_AUTO_ENCRYPTION=on    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio1:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - kes-setup
    command: server http://minio{1...3}/data{1...2}

  minio2:
    image: '${MINIO_IMAGE_NAME}'
    container_name: minio2
    networks:
      - minio
    volumes:
      - data2-1:/data1
      - data2-2:/data2
      - build:/build
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_KMS_KES_ENDPOINT=https://kes:7373
      - MINIO_KMS_KES_CERT_FILE=/build/kes-identity-root.cert
      - MINIO_KMS_KES_KEY_FILE=/build/kes-identity-root.key
      - MINIO_KMS_KES_CA_PATH=/build/kes-server.cert
      - MINIO_KMS_KES_KEY_NAME=minio-key
      - MINIO_SSE_AUTO_ENCRYPTION=on    
    healthcheck:
      test: ["CMD", "curl", "-f", "https://minio2:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - kes-setup
    command: server http://minio{1...3}/data{1...2}

  minio3:
    image: '${MINIO_IMAGE_NAME}'
    container_name: minio3
    networks:
      - minio    
    volumes:
      - data3-1:/data1
      - data3-2:/data2
      - build:/build
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_KMS_KES_ENDPOINT=https://kes:7373
      - MINIO_KMS_KES_CERT_FILE=/build/kes-identity-root.cert
      - MINIO_KMS_KES_KEY_FILE=/build/kes-identity-root.key
      - MINIO_KMS_KES_CA_PATH=/build/kes-server.cert
      - MINIO_KMS_KES_KEY_NAME=minio-key
      - MINIO_SSE_AUTO_ENCRYPTION=on
    healthcheck:
      test: ["CMD", "curl", "-f", "https://minio3:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:     
      - kes-setup
    command: server http://minio{1...3}/data{1...2}
      
  nginx:
    image: nginx-minio
    container_name: nginx
    ports:
      - "8081:80"
      - "443:443"
    networks:
      - minio
    restart: always
    build:
      context: ./nginx
    depends_on:
      - minio1
      - minio2
      - minio3

  interactive-shell:
    image: alpine
    tty: true
    container_name: interactive-shell
    networks:
      - minio
    volumes:
      - build:/build      
    environment:
      - KES_SERVER=https://kes:7373
      - KES_CLIENT_KEY=/build/kes-identity-minio.key
      - KES_CLIENT_CERT=/build/kes-identity-minio.cert
    depends_on:
      - minio1
      - minio2
      - minio3
      - kes
    command:  >
      sh -c " apk add -U --no-cache ca-certificates &&
              cp /build/kes-server.cert /usr/local/share/ca-certificates/kes-server.crt  &&
              update-ca-certificates &&              
              wget https://github.com/minio/kes/releases/latest/download/kes-linux-amd64 -O /bin/kes && 
              chmod +x /bin/kes && 
              wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /bin/mc &&
              chmod +x /bin/mc &&             
              /bin/sh"

  kes:
    image: kes
    container_name: kes
    ports:
      - "7373:7373"      
    networks:
      - minio 
    volumes:
      - build:/build
    environment:
      - KES_SERVER=https://kes:7373
      - KES_CLIENT_KEY=/build/kes-identity-root.key
      - KES_CLIENT_CERT=/build/kes-identity-root.cert      
    build:
      context: ./kes    
    command:  >
      sh -c " openssl ecparam -genkey -name prime256v1 | openssl ec -out /build/kes-server.key &&
              openssl req -new -x509 -days 365 -key /build/kes-server.key -out /build/kes-server.cert -subj '/C=/ST=/L=/O=/CN=kes'
              kes tool identity new --force --key=/build/kes-identity-root.key --cert=/build/kes-identity-root.cert root &&
              kes tool identity new --force --key=/build/kes-identity-minio.key --cert=/build/kes-identity-minio.cert minio &&              
              cp /build/kes-identity-minio.cert /usr/local/share/ca-certificates/kes-identity-minio.crt  &&
              cp /build/kes-server.cert /usr/local/share/ca-certificates/kes-server.crt  &&
              cp /build/kes-identity-root.cert /usr/local/share/ca-certificates/kes-identity-root.crt  &&
              update-ca-certificates &&                            
              export ROOT_IDENTITY=$$(kes tool identity of /build/kes-identity-root.cert) &&              
              echo root identity: $$ROOT_IDENTITY &&
              kes server --config=/etc/kes/kes-server.yml --root=$$ROOT_IDENTITY "

  kes-setup:
    image: kes-setup
    container_name: kes-setup
    networks:
      - minio 
    volumes:
      - build:/build
    environment:
      - KES_SERVER=https://kes:7373
      - KES_CLIENT_KEY=/build/kes-identity-root.key
      - KES_CLIENT_CERT=/build/kes-identity-root.cert
    build:
      context: ./kes
    depends_on:
      - kes    
    command:  >
      sh -c " cp /build/kes-server.cert /usr/local/share/ca-certificates/kes-server.crt  &&
              cp /build/kes-identity-root.cert /usr/local/share/ca-certificates/kes-identity-root.crt  &&
              update-ca-certificates  && 
              wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /bin/mc &&
              chmod +x /bin/mc && 
              kes key create minio-key && 
              kes key derive minio-key &&
              mc encrypt set sse-s3 minio/bucket1 "

  vault:
    image: vault
    container_name: vault
    ports:
      - 8201:8201
    restart: always
    build:
      context: ./vault
    environment:
      - VAULT_ADDR=http://0.0.0.0:8201
      - VAULT_API_ADDR=http://0.0.0.0:8201
      - VAULT_ADDRESS=http://0.0.0.0:8201
      - VAULT_SKIP_VERIFY=true
    cap_add:
      - IPC_LOCK
    volumes:
      - build:/build
    command: > 
      sh -c " openssl ecparam -genkey -name prime256v1 | openssl ec -out /vault/config/vault-tls.key &&
              openssl req -new -x509 -days 365 -key /vault/config/vault-tls.key -out /vault/config/vault-tls.cert -subj '/C=/ST=/L=/O=/CN=vault' &&
              cp /vault/config/vault-tls.cert /usr/local/share/ca-certificates/vault-tls.cert  &&
              update-ca-certificates  && 
              vault server -dev -config /vault/config/vault.json "

  # certificates-builder:
  #   image: alpine
  #   container_name: certificates-builder
  #   volumes:
  #     - build1:/build1
  #     - build2:/build2
  #     - build3:/build3
  #   build:
  #     context: ./certificates-builder
  #   command: >
  #     sh -c " openssl ecparam -genkey -name prime256v1 | openssl ec -out /build1/private.key &&
  #             openssl req -new -x509 -days 365 -key /build1/private.key -out /build1/public.crt -subj '/C=/ST=/L=/O=/CN=minio1' &&
  #             openssl ecparam -genkey -name prime256v1 | openssl ec -out /build2/private.key &&
  #             openssl req -new -x509 -days 365 -key /build2/private.key -out /build2/public.crt -subj '/C=/ST=/L=/O=/CN=minio2' &&
  #             openssl ecparam -genkey -name prime256v1 | openssl ec -out /build3/private.key &&
  #             openssl req -new -x509 -days 365 -key /build3/private.key -out /build3/public.crt -subj '/C=/ST=/L=/O=/CN=minio3' "

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  build:
  # build1:
  # build2:
  # build3:

networks:
  minio:
    name: minio
    driver: bridge

